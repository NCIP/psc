package edu.northwestern.bioinformatics.studycalendar.utils.accesscontrol;

import edu.nwu.bioinformatics.commons.ComparisonUtils;

import edu.northwestern.bioinformatics.studycalendar.testing.StudyCalendarTestCase;
import gov.nih.nci.security.UserProvisioningManager;
import gov.nih.nci.security.authorization.domainobjects.ProtectionElement;
import gov.nih.nci.security.authorization.domainobjects.ProtectionGroup;
import gov.nih.nci.security.exceptions.CSException;
import gov.nih.nci.security.exceptions.CSObjectNotFoundException;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.lang.reflect.InvocationTargetException;

import org.easymock.classextension.EasyMock;
import static org.easymock.classextension.EasyMock.*;
import org.easymock.IArgumentMatcher;
import org.apache.commons.beanutils.PropertyUtils;

/**
 * @author Rhett Sutphin
 */
public class StudyCalendarAuthorizationManagerTest extends StudyCalendarTestCase {
    private static final String URL = "/zip/zip/zip";
    private static final ProtectionGroup
        PG1 = createPG(1), PG2 = createPG(2), PG3 = createPG(3);

    private StudyCalendarAuthorizationManager manager;
    private UserProvisioningManager userProvisioningManager;

    protected void setUp() throws Exception {
        super.setUp();
        userProvisioningManager = registerMockFor(UserProvisioningManager.class);

        expect(userProvisioningManager.getProtectionGroups()).andReturn(pgList(PG1, PG2, PG3)).anyTimes();

        manager = new StudyCalendarAuthorizationManager();
        manager.setUserProvisioningManager(userProvisioningManager);
    }

    public void testRegisterUrlWhenNew() throws Exception {
        userProvisioningManager.getProtectionElement(URL);
        expectLastCall().andThrow(new CSObjectNotFoundException("No such thing"));

        ProtectionElement expectedPE = new ProtectionElement();
        expectedPE.setObjectId(URL);
        expectedPE.setProtectionElementName(URL);
        expectedPE.setProtectionElementDescription("Autogenerated PE for " + URL);
        userProvisioningManager.createProtectionElement(matchByProperties(expectedPE));
        expectedPE.setProtectionElementId(56L);
        expect(userProvisioningManager.getProtectionElement(URL)).andReturn(expectedPE);
        expect(userProvisioningManager.getProtectionGroups("56")).andReturn(pgSet());

        userProvisioningManager.assignToProtectionGroups(eq("56"), aryEq(pgIds(PG1)));

        replayMocks();
        manager.registerUrl(URL, pgNames(PG1));
        verifyMocks();
    }

    public void testRegisterUrlWhenCorrect() throws Exception {
        ProtectionElement expectedPE = new ProtectionElement();
        expectedPE.setProtectionElementId(345L);
        expectedPE.setObjectId(URL);
        expect(userProvisioningManager.getProtectionElement(URL)).andReturn(expectedPE);
        expect(userProvisioningManager.getProtectionGroups("345")).andReturn(pgSet(PG2));

        replayMocks();
        manager.registerUrl(URL, pgNames(PG2));
        verifyMocks();
    }

    public void testRegisterUrlWhenGroupsChanged() throws Exception {
        ProtectionElement expectedCurrentPE = new ProtectionElement();
        expectedCurrentPE.setObjectId(URL);
        expectedCurrentPE.setProtectionElementId(456L);
        expect(userProvisioningManager.getProtectionElement(URL)).andReturn(expectedCurrentPE);
        expect(userProvisioningManager.getProtectionGroups("456")).andReturn(pgSet(PG1, PG2));

        userProvisioningManager.assignToProtectionGroups(eq("456"), aryEq(pgIds(PG1, PG3)));

        replayMocks();
        manager.registerUrl(URL, pgNames(PG1, PG3));
        verifyMocks();
    }

    private static ProtectionGroup createPG(long id) {
        ProtectionGroup g = new ProtectionGroup();
        g.setProtectionGroupId(id);
        g.setProtectionGroupName("PG" + id);
        return g;
    }

    private static List<ProtectionGroup> pgList(ProtectionGroup... groups) {
        return Arrays.asList(groups);
    }

    private static Set<ProtectionGroup> pgSet(ProtectionGroup... groups) {
        return new LinkedHashSet<ProtectionGroup>(pgList(groups));
    }

    private static List<String> pgNames(ProtectionGroup... groups) {
        List<String> names = new ArrayList<String>(groups.length);
        for (ProtectionGroup group : groups) names.add(group.getProtectionGroupName());
        return names;
    }

    private static String[] pgIds(ProtectionGroup... groups) {
        List<String> ids = new ArrayList<String>(groups.length);
        for (ProtectionGroup group : groups) ids.add(group.getProtectionGroupId().toString());
        return ids.toArray(new String[0]);
    }

    private static <T> T matchByProperties(T template) {
        EasyMock.reportMatcher(new PropertyMatcher<T>(template));
        return null;
    }

    /**
     * Easymock matcher that compares two objects on their property values
     */
    private static class PropertyMatcher<T> implements IArgumentMatcher {
        private T template;
        private Map<String, Object> templateProperties;

        public PropertyMatcher(T template) {
            this.template = template;
            try {
                templateProperties = PropertyUtils.describe(template);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(e);
            } catch (InvocationTargetException e) {
                throw new RuntimeException(e);
            } catch (NoSuchMethodException e) {
                throw new RuntimeException(e);
            }
        }

        public boolean matches(Object argument) {
            try {
                Map<String, Object> argumentProperties = PropertyUtils.describe(argument);
                for (Map.Entry<String, Object> entry : templateProperties.entrySet()) {
                    Object argProp = argumentProperties.get(entry.getKey());
                    Object templProp = entry.getValue();
                    if (!ComparisonUtils.nullSafeEquals(templProp, argProp)) {
                        throw new AssertionError("Argument's " + entry.getKey()
                            + " property doesn't match template's: " + templProp + " != " + argProp);
                    }
                }
            } catch (IllegalAccessException e) {
                throw new RuntimeException(e);
            } catch (InvocationTargetException e) {
                throw new RuntimeException(e);
            } catch (NoSuchMethodException e) {
                throw new RuntimeException(e);
            }

            return true;
        }


        public void appendTo(StringBuffer buffer) {
            buffer.append(template).append(" (by properties)");
        }
    }
}
