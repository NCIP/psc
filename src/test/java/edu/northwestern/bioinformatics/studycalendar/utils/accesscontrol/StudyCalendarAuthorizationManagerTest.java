package edu.northwestern.bioinformatics.studycalendar.utils.accesscontrol;

import static java.util.Arrays.asList;

import edu.nwu.bioinformatics.commons.ComparisonUtils;

import edu.northwestern.bioinformatics.studycalendar.testing.StudyCalendarTestCase;
import edu.northwestern.bioinformatics.studycalendar.domain.*;
import edu.northwestern.bioinformatics.studycalendar.service.UserService;
import gov.nih.nci.security.UserProvisioningManager;
import gov.nih.nci.security.dao.RoleSearchCriteria;
import gov.nih.nci.security.dao.SearchCriteria;
import gov.nih.nci.security.dao.GroupSearchCriteria;
import gov.nih.nci.security.authorization.domainobjects.*;
import gov.nih.nci.security.authorization.domainobjects.Role;
import gov.nih.nci.security.exceptions.CSException;
import gov.nih.nci.security.exceptions.CSObjectNotFoundException;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.lang.reflect.InvocationTargetException;

import org.easymock.classextension.EasyMock;
import static org.easymock.classextension.EasyMock.*;
import org.easymock.IArgumentMatcher;
import org.apache.commons.beanutils.PropertyUtils;

/**
 * @author Rhett Sutphin
 */
public class StudyCalendarAuthorizationManagerTest extends StudyCalendarTestCase {
    private static final String URL = "/zip/zip/zip";
    private static final ProtectionGroup
        PG1 = createPG(1), PG2 = createPG(2), PG3 = createPG(3);

    private StudyCalendarAuthorizationManager manager;
    private UserProvisioningManager userProvisioningManager;

    protected void setUp() throws Exception {
        super.setUp();
        userProvisioningManager = registerMockFor(UserProvisioningManager.class);

        expect(userProvisioningManager.getProtectionGroups()).andReturn(pgList(PG1, PG2, PG3)).anyTimes();

        manager = new StudyCalendarAuthorizationManager();
        manager.setUserProvisioningManager(userProvisioningManager);
    }

    public void testRegisterUrlWhenNew() throws Exception {
        userProvisioningManager.getProtectionElement(URL);
        expectLastCall().andThrow(new CSObjectNotFoundException("No such thing"));

        ProtectionElement expectedPE = new ProtectionElement();
        expectedPE.setObjectId(URL);
        expectedPE.setProtectionElementName(URL);
        expectedPE.setProtectionElementDescription("Autogenerated PE for " + URL);
        userProvisioningManager.createProtectionElement(matchByProperties(expectedPE));
        expectedPE.setProtectionElementId(56L);
        expect(userProvisioningManager.getProtectionElement(URL)).andReturn(expectedPE);
        expect(userProvisioningManager.getProtectionGroups("56")).andReturn(pgSet());

        userProvisioningManager.assignToProtectionGroups(eq("56"), aryEq(pgIds(PG1)));

        replayMocks();
        manager.registerUrl(URL, pgNames(PG1));
        verifyMocks();
    }

    public void testRegisterUrlWhenCorrect() throws Exception {
        ProtectionElement expectedPE = new ProtectionElement();
        expectedPE.setProtectionElementId(345L);
        expectedPE.setObjectId(URL);
        expect(userProvisioningManager.getProtectionElement(URL)).andReturn(expectedPE);
        expect(userProvisioningManager.getProtectionGroups("345")).andReturn(pgSet(PG2));

        replayMocks();
        manager.registerUrl(URL, pgNames(PG2));
        verifyMocks();
    }

    public void testRegisterUrlWhenGroupsChanged() throws Exception {
        ProtectionElement expectedCurrentPE = new ProtectionElement();
        expectedCurrentPE.setObjectId(URL);
        expectedCurrentPE.setProtectionElementId(456L);
        expect(userProvisioningManager.getProtectionElement(URL)).andReturn(expectedCurrentPE);
        expect(userProvisioningManager.getProtectionGroups("456")).andReturn(pgSet(PG1, PG2));

        userProvisioningManager.assignToProtectionGroups(eq("456"), aryEq(pgIds(PG1, PG3)));

        replayMocks();
        manager.registerUrl(URL, pgNames(PG1, PG3));
        verifyMocks();
    }

    public void testAssignProtectionGroupsToUsers() throws Exception {
        Role role0 = new Role();
        role0.setName(edu.northwestern.bioinformatics.studycalendar.domain.Role.SITE_COORDINATOR.csmRole());
        role0.setId(7L);
        Role role1 = new Role();
        role1.setName(edu.northwestern.bioinformatics.studycalendar.domain.Role.PARTICIPANT_COORDINATOR.csmRole());
        role1.setId(4L);

        String userId = "1";

        ProtectionGroup protectionGroup = new ProtectionGroup();
        protectionGroup.setProtectionGroupId(100L);

        RoleSearchCriteria criteria0 = new RoleSearchCriteria(role0);
        RoleSearchCriteria criteria1 = new RoleSearchCriteria(role1);

        expect(userProvisioningManager.getObjects(eqRoleSearchCriteria(criteria0))).andReturn(asList(role0));
        expect(userProvisioningManager.getObjects(eqRoleSearchCriteria(criteria1))).andReturn(asList(role1));

        userProvisioningManager.assignUserRoleToProtectionGroup(eq(userId), aryEq(new String[]{role0.getId().toString(), role1.getId().toString()}), eq(protectionGroup.getProtectionGroupId().toString()));
        replayMocks();

        manager.assignProtectionGroupsToUsers(asList(userId), protectionGroup, new String[] {role0.getName(), role1.getName()});
        verifyMocks();
    }

    public void testIsGroupEqualToRole() {
        StudyCalendarAuthorizationManager us = new StudyCalendarAuthorizationManager();
        assertTrue(us.isGroupEqualToRole(createCsmGroup(1L, "STUDY_COORDINATOR"), edu.northwestern.bioinformatics.studycalendar.domain.Role.STUDY_COORDINATOR));
        assertFalse(us.isGroupEqualToRole(createCsmGroup(1L, "STUDY_COORDINATOR"), edu.northwestern.bioinformatics.studycalendar.domain.Role.SITE_COORDINATOR));
    }

    private static ProtectionGroup createPG(long id) {
        ProtectionGroup g = new ProtectionGroup();
        g.setProtectionGroupId(id);
        g.setProtectionGroupName("PG" + id);
        return g;
    }

    private static List<ProtectionGroup> pgList(ProtectionGroup... groups) {
        return asList(groups);
    }

    private static Set<ProtectionGroup> pgSet(ProtectionGroup... groups) {
        return new LinkedHashSet<ProtectionGroup>(pgList(groups));
    }

    private static List<String> pgNames(ProtectionGroup... groups) {
        List<String> names = new ArrayList<String>(groups.length);
        for (ProtectionGroup group : groups) names.add(group.getProtectionGroupName());
        return names;
    }

    private static String[] pgIds(ProtectionGroup... groups) {
        List<String> ids = new ArrayList<String>(groups.length);
        for (ProtectionGroup group : groups) ids.add(group.getProtectionGroupId().toString());
        return ids.toArray(new String[0]);
    }

    public static RoleSearchCriteria eqRoleSearchCriteria(RoleSearchCriteria in) {
        EasyMock.reportMatcher(new RoleSearchCriteriaEquals(in));
        return null;
    }

    public static class RoleSearchCriteriaEquals implements IArgumentMatcher {
        private RoleSearchCriteria expected;

        public RoleSearchCriteriaEquals(RoleSearchCriteria expected) {
            this.expected = expected;
        }

        public boolean matches(Object actual) {
            if (!(actual instanceof RoleSearchCriteria)) {
                return false;
            }

            return(((RoleSearchCriteria) actual).getFieldAndValues().entrySet().iterator().next()
                    .equals((expected.getFieldAndValues().entrySet().iterator().next())));
        }

        public void appendTo(StringBuffer buffer) {
            buffer.append("eqRoleSearchCriteria(");
            buffer.append(expected.getClass().getName());
            buffer.append(" with message \"");
            buffer.append(expected.getFieldAndValues().entrySet().iterator().next());
            buffer.append("\")");
        }
    }

     public static GroupSearchCriteria eqGroupSearchCriteria(GroupSearchCriteria in) {
        EasyMock.reportMatcher(new GroupSearchCriteriaEquals(in));
        return null;
    }

    public static class GroupSearchCriteriaEquals implements IArgumentMatcher {
        private GroupSearchCriteria expected;

        public GroupSearchCriteriaEquals(GroupSearchCriteria expected) {
            this.expected = expected;
        }

        public boolean matches(Object actual) {
            if (!(actual instanceof GroupSearchCriteria)) {
                return false;
            }

            return(((GroupSearchCriteria) actual).getFieldAndValues().entrySet().iterator().next()
                    .equals((expected.getFieldAndValues().entrySet().iterator().next())));
        }

        public void appendTo(StringBuffer buffer) {
            buffer.append("eqRoleSearchCriteria(");
            buffer.append(expected.getClass().getName());
            buffer.append(" with message \"");
            buffer.append(expected.getFieldAndValues().entrySet().iterator().next());
            buffer.append("\")");
        }
    }


    private Group createCsmGroup(Long id, String name) {
        Group g = new Group();
        g.setGroupId(id);
        g.setGroupName(name);
        return g;
    }    
}
