# ----------------------------------------------------------------------------
# Sample beandoc.properties configuration file.
#
# Darren Davison Oct. 2005
#
# Most properties are self-documenting, a brief explanation of some of the 
# configurable options that you may wish to tweak are highlighted below.
# ----------------------------------------------------------------------------

# input files can be one or more (comma-separated if multiple) resource
# locations.  Resources are standard Spring resources and can use file:/ or
# classpath: protocols and wildcards.  Note that beandoc defaults to FILE
# sysytem resources, not classpath resources if no qualifier is listed.
# If you're calling BeanDoc via the Ant task, you can specify input files as
# one or more nested <fileset> elements inside the <beandoc> ant task and
# leave this property out.  Values specified as filesets will override any
# value in this file in the case that both are defined.  Some examples of use 
# are shown below.
#input.files=/path/to/*.xml
#input.files=/projects/my-spring-project/file1.xml,/projects/my-spring-project/file2.xml
#input.files=classpath:/com/foo/bar/context.xml
#input.files=C:/projects/my-spring-project/*.xml

# The directory you want all BeanDoc output to go to.  output.dir must be 
# writeable for the current user and must already exist prior to running the 
# tool.  This value can be specified as an attribute to the <beandoc> Ant task
# if you're invoking BeanDoc from there, in which case this value can be
# omitted
#output.dir=/path/to/beandoc-output/

# you can have the XML parser not bother to validate the input files against
# the DTD if you so wish.  True by default.
processor.validateFiles=false

# proxy beans and their targets can be merged such that the target is 
# documented and graphed as an anonymous inner bean would be.  Logically
# a proxy and its target are one, but they may be separate in context files 
# so that, for example, unit tests can access the unwrapped target.  Specify
# a regex pattern for the proxy beans you wish to merge with the value of
# the map entry being the property name that the target is found under 
# (usually 'target').
#processor.mergeProxies[^myProxyBean$]=target
#processor.mergeProxies[.*ProxyFactoryBean]=target

# documentation title used in the HTML output
html.title=PSC Application Context

# you can override the system default locale with your choice here
#i18n.locale=en_GB

# skin the output with your own CSS file if you don't like ours!  The 
# wheat.css is an included option that you can try.
#html.cssUrl=wheat.css
#html.cssUrl=http://our.corporate.server/beandoc.css

# well known (Java system and SpringFramework) API locations are built in to 
# the tool.  Add your own here.  The following example will link a classname of 
# com.foo.bar.MyClass to http://your.local.server/apidoc/com/foo/bar/MyClass.html
#javadoc.locations[com.foo.bar]=http://your.local.server/apidoc/

# You can optionally override the inbuilt ones too if you have, for example, 
# locally installed copies of the javadoc..
#javadoc.locations[java]=file:///path/to/local/jdk/apidoc/

# to get the graphing working, specify the location of your GraphViz dot 
# binary here
#compiler.dotExe=/usr/bin/dot
#compiler.dotExe=C:/Program Files/ATT/GraphViz/bin/dot.exe

# if you wish to save the intermediate .dot files that are consumed by
# GraphViz, uncomment the next property
#compiler.removeDotFiles=false

# change the default shape of the beans on the graph outputs.  'ellipse'
# is the default, you may like one of the others better
#graphs.beanShape=box
#graphs.beanShape=circle

# pretty up the graphs with some nice colours.  Override the built-ins or add 
# to them as required for your bean names or package names - uses standard
# Regex patterns
graphs.colourBeans[org.acegisecurity.*]=#a090a0
graphs.colourBeans[org.springframework.*]=#a090a0

# selectively ignore beans on graphing output.  All beans will still be 
# documented in HTML by default.  Uses standard Regex patterns.
graphs.ignoreBeans[0]=^org\.springframework.*Property.*Configurer
graphs.ignoreBeans[1]=.*MessageSource

# constrain certain beans to a single rank (row) on the graphs.  Use with care.
graphs.rankBeans[0]=.*DataSource
#graphs.rankBeans[1]=.*samples\..*\.dao\.ibatis.*

# change the graph types if needed (PNG is highly recommended if your viewer 
# supports it).
graphs.outputType=png
#graphs.outputType=jpg
#graphs.outputType=gif
#graphs.outputType=svg

# change the font from the default 'sans' (which will work on most 
# platforms).  On *nix platforms, where font server setups vary, you may
# not get expected results.  If you don't, see the graphviz documentation
# for more information on font handling
#graphs.fontName=arial

# change the point size of the font from the default of 9
#graphs.fontSize=8

# change the location of graph labels from (t)op to (b)ottom
#graphs.labelLocation=b

# if skinning the output with CSS just doesn't cut it for you, feel free to 
# supply your own XSLT templates to any of the Transformer beans!
#htmlIndexTransformer.templateName=classpath:my/preferred/stylesheet.xsl
