<project name="caBIG Study Calendar" default="compile">

    <!-- PROPERTIES AND PATHS -->
    <property name="src-dir.main"      value="src"/>
    <property name="src-dir.unit-test" value="test/unit"/>

    <property name="build-dir.main"      value="web/WEB-INF/classes"/>
    <property name="build-dir.unit-test" value="build/test-classes"/>
    <property name="build-dir.webapp"    value="build/web"/>

    <property name="api-dir"  value="build/api"/>
    <property name="metrics-dir"  value="build/metrics"/>
    <property name="coverage-dir" value="${metrics-dir}/coverage"/>

    <property name="war-name" value="studycalendar.war"/>
    <property name="dbunit-dtd-filename" value="build/dbunit-sc.dtd"/>

    <!-- emma needs this -->
    <path id="cp.compiled-source">
        <pathelement location="${build-dir.main}"/>
    </path>

    <path id="cp.jdbc">
        <fileset dir="db/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="cp.j2ee">
        <fileset dir="tools/j2ee-api">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="cp.main">
        <path refid="cp.compiled-source"/>
        <path refid="cp.j2ee"/>
        <fileset dir="web/WEB-INF/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="cp.unit-test">
        <path refid="cp.main"/>
        <path refid="cp.jdbc"/>
        <path refid="cp.j2ee"/>
        <pathelement location="${build-dir.unit-test}"/>
        <fileset dir="test/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="cp.integrated-test">
        <path refid="cp.main"/>
        <path refid="cp.jdbc"/>
        <path refid="cp.j2ee"/>
        <fileset dir="test/infrastructure/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- TASK LIBRARIES -->

    <path id="cp.emma">
        <pathelement location="test/lib/emma.jar"/>
        <pathelement location="test/lib/emma_ant.jar"/>
    </path>

    <taskdef resource="emma_ant.properties" classpathref="cp.emma"/>

    <path id="cp.bering">
        <path refid="cp.jdbc"/>
        <fileset dir="tools/bering">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <taskdef resource="edu/northwestern/bioinformatics/bering/antlib.xml" classpathref="cp.bering"/>

    <taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="cp.unit-test"/>
    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpathref="cp.integrated-test"/>

    <!-- TARGETS -->

    <target name="init" depends="default-properties">
        <mkdir dir="${build-dir.main}"/>
        <mkdir dir="${build-dir.unit-test}"/>
        <mkdir dir="${metrics-dir}"/>

        <property name="config.database.file" value="db/${config.database}.properties"/>
        <fail message="Database not configured (could not read ${config.database.file}.).  See db/readme.txt.">
            <condition>
                <not><available file="${config.database.file}"/></not>
            </condition>
        </fail>
        <property file="${config.database.file}"/>
        <echo>All database ops for this build will use ${datasource.url}</echo>
    </target>

    <target name="default-properties">
        <property name="test.failfast" value="false"/>
        <property name="config.database" value="studycalendar"/>
    </target>

    <target name="clean">
        <delete dir="build"/>
        <delete dir="${build-dir.main}"/>
        <delete dir="${build-dir.webapp}"/>
        <delete dir="dist"/>
    </target>

    <target name="resources" description="Copy resources into classpath" depends="init">
        <copy file="${config.database.file}" tofile="${build-dir.main}/datasource.properties" overwrite="true"/>
        <copy todir="${build-dir.main}">
            <fileset dir="${src-dir.main}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
                <include name="**/*.ftl"/>
            </fileset>
        </copy>
        <copy todir="${build-dir.unit-test}">
            <fileset dir="${src-dir.unit-test}">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>

    <target name="compile" description="Compile all java source" depends="resources">
        <javac destdir="${build-dir.main}" classpathref="cp.main"
               debug="true" source="1.5">
            <src path="${src-dir.main}"/>
        </javac>
        <javac destdir="${build-dir.unit-test}" classpathref="cp.unit-test"
               debug="true" source="1.5">
            <src path="${src-dir.unit-test}"/>
        </javac>
    </target>

    <target name="selenium" description="Flag webapp deployment to include selenium infrastructure">
        <property name="include-test-infrastructure" value="*"/>
    </target>

    <target name="webapp" description="Merge created application into deployment directory" depends="compile, webapp.main, webapp.selenium"/>

    <target name="webapp.main" description="Copy basic webapp only, without recompiling">
        <!-- basic application - just copy from web directory -->
        <copy todir="${build-dir.webapp}">
            <fileset dir="web">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <target name="webapp.selenium" if="include-test-infrastructure">
        <antcall target="dbunit-dtd"/> <!-- "depends" doesn't obey the condition -->
        <property name="test-dir.infrastructure" value="test/infrastructure"/>
        <copy todir="${build-dir.webapp}/WEB-INF/lib">
            <fileset dir="${test-dir.infrastructure}/lib">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
        <xmltask source="web/WEB-INF/web.xml" dest="${build-dir.webapp}/WEB-INF/web.xml"
                 failwithoutmatch="true">
            <insert path="//:web-app" file="${test-dir.infrastructure}/conf/web.xml"/>
        </xmltask>
        <copy todir="${build-dir.webapp}/WEB-INF">
            <fileset dir="${test-dir.infrastructure}/conf">
                <include name="**/*.xml"/>
                <exclude name="web.xml"/>
            </fileset>
        </copy>
        <copy todir="${build-dir.webapp}/WEB-INF/classes/edu/northwestern/bioinformatics/studycalendar/test/data" overwrite="true" verbose="true">
            <fileset dir="test/selenium/testdata">
                <include name="**/*.xml"/>
            </fileset>
            <filterset>
                <filter token="DTD_PATH" value="${basedir}/${dbunit-dtd-filename}"/>
            </filterset>
        </copy>
        <javac destdir="${build-dir.webapp}/WEB-INF/classes" classpathref="cp.integrated-test"
               debug="true" source="1.5">
            <src path="test/infrastructure/src"/>
        </javac>
    </target>

    <target name="api" description="Create javadoc for application code API (i.e. domain objects and DAOs)" depends="init">
        <mkdir dir="${api-dir}"/>
        <javadoc destdir="${api-dir}" classpathref="cp.main" source="1.5">
            <fileset dir="${src-dir.main}">
                <include name="**/dao/**/*.java"/>
                <include name="**/domain/**/*.java"/>
            </fileset>
        </javadoc>
    </target>

    <!-- DATABASE SETUP -->

    <target name="migrate" description="migrate database schema" depends="init">
        <property name="migrate.version" value=""/>
        <property name="bering.dialect" value=""/>
        <migrate classpathRef="cp.bering"
                 driver="${datasource.driver}"
                 dialect="${bering.dialect}"
                 url="${datasource.url}"
                 userid="${datasource.username}"
                 password="${datasource.password}"
                 targetVersion="${migrate.version}"
            />
    </target>

    <target name="dbunit-dtd" description="Create DTD for dbunit" depends="init">
        <dbunit
            driver="${datasource.driver}"
            url="${datasource.url}"
            userid="${datasource.username}"
            password="${datasource.password}"
            >
            <classpath refid="cp.unit-test"/>
            <export
                dest="${dbunit-dtd-filename}"
                format="dtd"/>
        </dbunit>
    </target>

    <!-- TEST SETUP & EXECUTION -->

    <target name="test.unit.select-all">
        <property name="unit-test.pattern" value="**/*Test.java"/>
    </target>

    <target name="test.unit.select-database">
        <property name="unit-test.pattern" value="**/dao/**/*Test.java"/>
    </target>

    <target name="test.unit" description="Run unit tests" depends="compile, test.unit.select-all">
        <echo>Executing unit tests: ${unit-test.pattern}</echo>

        <emma enabled="${emma.enabled}">
<!-- Hibernate (I think because of a Spring classloader issue (TODO: we should check that this is still true))
     can't find hbm files from another part of the classpath, so we must use fullcopy to the instrumentation dir -->
            <instr instrpathref="cp.compiled-source" destdir="${out.instrumented.dir}"
                    metadatafile="${coverage-dir}/metadata.emma" merge="true" mode="fullcopy"/>
        </emma>

        <mkdir dir="${build-dir.unit-test}/junit"/>
        <junit printsummary="yes" haltonfailure="${test.failfast}" failureproperty="test.unit.failed" fork="true" forkmode="once" dir="${basedir}">
            <classpath>
                <!-- the pathelement only included on classpath if out.instrumented.dir defined, i.e. if EMMA is enabled -->
                <pathelement location="${out.instrumented.dir}/classes"/>
                <path refid="cp.unit-test"/>
                <path refid="cp.emma"/>
            </classpath>
            <jvmarg value="-Demma.coverage.out.file=${coverage-dir}/coverage.emma"/>
            <jvmarg value="-Demma.coverage.out.merge=false"/>
            <formatter type="plain" usefile="false"/>
            <formatter type="xml" usefile="true"/>
            <batchtest todir="${build-dir.unit-test}/junit">
                <fileset dir="${src-dir.unit-test}">
                    <include name="${unit-test.pattern}"/>
                </fileset>
            </batchtest>
        </junit>

        <emma enabled="${emma.enabled}">
            <merge outfile="${coverage-dir}/session.emma">
                <fileset dir="${coverage-dir}" includes="*.emma"/>
            </merge>

            <report sourcepath="src">
                <fileset dir="${coverage-dir}">
                    <include name="session.emma"/>
                </fileset>
                <txt outfile="${coverage-dir}/coverage.txt"/>
                <html outfile="${coverage-dir}/coverage.html"/>
                <xml outfile="${coverage-dir}/coverage.xml"/>
            </report>
        </emma>

        <fail if="test.unit.failed">One or more unit tests failed.  See above or set test.failfast=true.</fail>
    </target>

    <!-- N.b.: this task must not depend on init (directly or otherwise) or the cruisecontrol build will break. -->
    <target name="create-hsqldb" description="Creates the read-only HSQLDB instance for testing">
        <property name="hsqldb-dir" value="hsqldb"/>
        <property name="hsqldb-jar" value="test/lib/sc-hsqldb.jar"/>
        <property name="create-hsqldb.temp-url" value="jdbc:hsqldb:file:${basedir}/${hsqldb-dir}/study_calendar"/>
        <delete file="${hsqldb-jar}"/>

        <propertyfile file="db/hsqldb.properties">
            <entry key="datasource.url"      value="jdbc:hsqldb:res:/${hsqldb-dir}/study_calendar"/>
            <entry key="datasource.username" value="sa"/>
            <entry key="datasource.password" value=""/>
            <entry key="datasource.dialect"  value="org.hibernate.dialect.HSQLDialect"/>
            <entry key="datasource.driver"   value="org.hsqldb.jdbcDriver"/>
        </propertyfile>

        <mkdir dir="${hsqldb-dir}"/>
        <ant antfile="${basedir}/build.xml">
            <property name="datasource.url" value="${create-hsqldb.temp-url}"/>
            <target name="hsqldb"/>
            <target name="migrate"/>
        </ant>

        <sql driver="org.hsqldb.jdbcDriver" url="${create-hsqldb.temp-url}"
            userid="sa" password="" classpathref="test.cfjava.libs" autocommit="true">
            <!-- database must be explicitly shutdown in HSQLDB >=1.7.2, so that the lock is
                released and the tests can reopen it -->
            SHUTDOWN SCRIPT;
        </sql>

        <jar file="${hsqldb-jar}">
            <fileset dir="${basedir}">
                <include name="${hsqldb-dir}/**/*"/>
            </fileset>
        </jar>
        <delete dir="${hsqldb-dir}"/>
    </target>

    <!-- CODE METRICS TARGETS -->

    <target name="emma" depends="init" description="enables EMMA code coverage recording during the build (i.e. during tests)">
        <property name="emma.enabled" value="true"/>
        <!-- EMMA instrumented classes output directory; must only exist if EMMA is enabled -->
        <property name="out.instrumented.dir" value="${coverage-dir}/instrumented-classes"/>
        <mkdir dir="${out.instrumented.dir}"/>
    </target>

    <!-- ARTIFACT CREATION -->

    <target name="war" depends="webapp" description="creates a deployable WAR file">
        <mkdir dir="dist"/>
        <war basedir="${build-dir.webapp}" destfile="dist/${war-name}" webxml="web/WEB-INF/web.xml">
            <exclude name="WEB-INF/web.xml"/>
        </war>
    </target>

    <!-- CRUISE CONTROL BUILDS -->

    <target name="oracle">
        <property name="config.database" value="oracle"/>
    </target>
    <target name="postgresql">
        <property name="config.database" value="postgresql"/>
    </target>
    <target name="hsqldb">
        <property name="config.database" value="hsqldb"/>
    </target>

    <target name="cruise.properties">
        <!-- overrides properties set in default-properties -->
        <property name="test.failfast" value="false"/>
    </target>

    <target name="cruise.exec" depends="clean, test.unit"/>

    <target name="cruise.exec.db" depends="migrate, test.unit.select-database, cruise.exec"/>

    <target name="cruise.artifacts">
        <property name="cruise.artifacts-dir" value="build/artifacts"/>
        <mkdir dir="${cruise.artifacts-dir}/emma"/>
        <copy todir="${cruise.artifacts-dir}/emma">
            <fileset dir="${coverage-dir}">
                <exclude name="instrumented-classes/**/*"/>
                <exclude name="instrumented-classes"/>
                <exclude name="*.emma"/>
            </fileset>
        </copy>
        <symlink link="${cruise.artifacts-dir}/emma/index.html" resource="coverage.html" failonerror="false"/>
    </target>

    <target name="cruisecontrol-full" description="CruiseControl build for all unit tests against HSQLDB"
        depends="cruise.properties, create-hsqldb, hsqldb, emma, cruise.exec, cruise.artifacts"/>

    <target name="cruisecontrol-oracle" description="CruiseControl build for db-only unit tests against Oracle"
        depends="cruise.properties, oracle, cruise.exec.db"/>

    <target name="cruisecontrol-postgresql" description="CruiseControl build for db-only unit tests against PostgreSQL"
        depends="cruise.properties, postgresql, cruise.exec.db"/>

    <!-- TOMCAT DEPLOYMENT -->

    <target name="tomcat.init" depends="webapp">
        <property name="tomcat.config-file" value="tools/tomcat/tomcat.properties"/>
        <fail message="Tomcat manager not configured (could not read ${tomcat.config-file}).">
            <condition>
                <not><available file="${tomcat.config-file}"/></not>
            </condition>
        </fail>
        <property file="${tomcat.config-file}"/>

        <property name="tomcat.context-file" value="${basedir}/tools/tomcat/context.xml"/>

        <taskdef file="tools/tomcat/tomcatTasks.properties">
            <classpath>
                <fileset dir="tools/tomcat">
                    <include name="lib/*.jar"/>
                </fileset>
            </classpath>
        </taskdef>
    </target>

    <target name="tomcat.create-context" depends="tomcat.init">
        <echo file="${tomcat.context-file}">&lt;Context path="${tomcat.deploy-path}" docBase="${basedir}/${build-dir.webapp}" debug="9"/&gt;</echo>
    </target>

    <target name="tomcat.deploy" depends="tomcat.init, tomcat.create-context"
            description="Deploy to local Tomcat install for development">
        <deploy url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            config="${tomcat.context-file}"
            path="${tomcat.deploy-path}"
            />
    </target>

    <target name="tomcat.undeploy" depends="tomcat.init" description="Remove from local Tomcat install">
        <undeploy url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="${tomcat.deploy-path}"
            />
    </target>

    <target name="tomcat.redeploy" depends="tomcat.undeploy, tomcat.deploy"
            description="Replace application in local Tomcat install (required for some configuration changes)"/>

    <target name="tomcat.reload" depends="tomcat.init" description="Reload running application instance">
        <reload url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="${tomcat.deploy-path}"
            />
    </target>

    <target name="tomcat.start" depends="tomcat.init" description="Start previously deployed instance">
        <start url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="${tomcat.deploy-path}"
            />
    </target>

    <target name="tomcat.stop" depends="tomcat.init" description="Stop running instance">
        <stop url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            path="${tomcat.deploy-path}"
            />
    </target>

    <target name="tomcat.list" depends="tomcat.init">
        <list url="${tomcat.manager.url}"
            username="${tomcat.username}"
            password="${tomcat.password}"
            />
    </target>
	
	<target name="reports-junit">
			<!-- junitreport -->
			<junitreport todir="${build-dir.unit-test}/junit">
				<fileset dir="${build-dir.unit-test}/junit">
					<include name="TEST-*.xml"/>
				</fileset>
				<report format="frames" todir="${build-dir.unit-test}/junit/summary"/>
				<report format="noframes" todir="${build-dir.unit-test}/junit/summary"/>
			</junitreport>

			<!-- junitdocreport -->
			<taskdef name="junitDocReport" classname="edu.duke.cabig.catrip.test.report.ant.JUnitDocReport">
				 <classpath>
	                <!-- the pathelement only included on classpath if out.instrumented.dir defined, i.e. if EMMA is enabled -->
	                <pathelement location="${out.instrumented.dir}/classes"/>
	                <path refid="cp.unit-test"/>
	                <path refid="cp.emma"/>
	            </classpath>
			</taskdef>

			<junitDocReport format="html" useTestType="true" destfile="${build-dir.unit-test}/junit/summary/junitDocReport.html">
				<junitResults>
					<fileset dir="${build-dir.unit-test}/junit">
						<include name="*.xml"/>
					</fileset>
				</junitResults>
				<junitDocs>
	                <fileset dir="${src-dir.unit-test}">
	                    <include name="${unit-test.pattern}"/>
	                </fileset>
				</junitDocs>
			</junitDocReport>
		</target>

		<target name="reports" depends="reports-junit"/>

</project>
